// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  CLIENT
  MEMBER
}

model User {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  firstName          String
  lastName           String
  phone              String
  email              String           @unique
  emailVerified      DateTime?
  image              String?
  userLogo           String?
  role               UserRole         @default(USER)
  location           String?
  password           String?
  plain              String?
  companyName        String?
  companyDescription String?
  userId             String?          @db.ObjectId
  status             Boolean          @default(true)
  accounts           Account[]
  guestProject       GuestProject[]
  sessions           Session[]
  project            Project[]
  invoices           Invoice[]
  modules            Module[]
  portfolioItem      PortfolioItem[]
  comments           ProjectComment[]
  payment            Payment[]
  isVerified         Boolean          @default(false)
  token              Int?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

enum ProjectStatus {
  COMPLETE
  ONGOING
}

model Project {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String           @unique
  notes       String?
  description String?
  bannerImage String?
  gradient    String?
  thumbnail   String?
  budget      Int?             @default(0)
  deadline    Int?
  startDate   DateTime         @default(now())
  endDate     DateTime?
  status      ProjectStatus    @default(ONGOING)
  clientId    String           @db.ObjectId
  user        User             @relation(fields: [userId], references: [id])
  userId      String           @db.ObjectId
  members     Member[]
  modules     Module[]
  invoices    Invoice[]
  payments    Payment[]
  comments    ProjectComment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProjectComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id])
  userName  String
  userRole  UserRole
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuestProject {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  projectLink    String
  projectName    String
  guestName      String
  projectOwner   String
  user           User     @relation(fields: [guestId], references: [id])
  guestId        String   @db.ObjectId
  projectOwnerId String?   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Module {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userName  String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskStatus {
  TODO
  INPROGRESS
  COMPLETE
}

model Task {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  status    TaskStatus @default(TODO)
  module    Module     @relation(fields: [moduleId], references: [id])
  moduleId  String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Member {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  role      UserRole
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String   @unique
  amount        Float
  status        String
  dueDate       DateTime
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  amount        Float
  tax           Float
  date          DateTime @default(now())
  invoiceNumber String   @unique
  method        String
  projectId     String   @db.ObjectId
  project       Project  @relation(fields: [projectId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  clientId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PortfolioItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageUrl    String?
  projectUrl  String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
