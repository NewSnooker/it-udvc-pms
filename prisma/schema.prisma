// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  CLIENT
  MEMBER
}

model User {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  firstName            String
  lastName             String
  phone                String
  email                String            @unique
  emailVerified        DateTime?
  image                String?
  userLogo             String?
  qrCodeUrl            String?
  role                 UserRole          @default(USER)
  location             String?
  password             String?
  plain                String?
  companyName          String?
  companyDescription   String?
  userId               String?           @db.ObjectId
  status               Boolean           @default(true)
  accounts             Account[]
  sessions             Session[]
  project              Project[]
  invoices             Invoice[]
  modules              Module[]
  portfolioItem        PortfolioItem[]
  comments             ProjectComment[]
  payment              Payment[]
  portfolioProfile     PortfolioProfile?
  subscriber           Subscriber[]
  isVerified           Boolean           @default(false)
  token                Int?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  folder               Folder[]
  guestProjectsAsGuest GuestProject[]    @relation("GuestProjectsAsGuest")
  guestProjectsAsOwner GuestProject[]    @relation("GuestProjectsAsOwner")
}

model PortfolioProfile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  profileImage String
  location     String
  email        String
  description  String
  xUrl         String?
  threadsUrl   String?
  facebookUrl  String?
  youtubeUrl   String?
  linkedinUrl  String?
  instagramUrl String?
  githubUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Subscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, email]) // เพิ่ม composite unique constraint
}

enum ProjectStatus {
  COMPLETE
  ONGOING
}

model Project {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String           @unique
  notes           String?
  description     String?
  bannerImage     String?
  gradient        String?
  freeDomain      String?
  customDomain    String?
  thumbnail       String?
  budget          Int?             @default(0)
  deadline        Int?
  startDate       DateTime         @default(now())
  endDate         DateTime?
  isPublic        Boolean          @default(false)
  status          ProjectStatus    @default(ONGOING)
  clientId        String           @db.ObjectId
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String           @db.ObjectId
  modules         Module[]
  invoices        Invoice[]
  payments        Payment[]
  comments        ProjectComment[]
  guestProject    GuestProject[]
  isSuccessStatus Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ProjectComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userName  String
  userRole  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuestProject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  guestId   String   @db.ObjectId
  ownerId   String   @db.ObjectId
  projectId String   @db.ObjectId
  guest     User     @relation("GuestProjectsAsGuest", fields: [guestId], references: [id])
  owner     User     @relation("GuestProjectsAsOwner", fields: [ownerId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  detail    String
  userName  String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskStatus {
  TODO
  INPROGRESS
  COMPLETE
}

model Task {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  detail    String
  status    TaskStatus @default(TODO)
  module    Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId  String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Invoice {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String   @unique
  amount        Float
  status        String
  dueDate       DateTime
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  amount        Float
  tax           Float
  qrCodeUrl     String?
  date          DateTime @default(now())
  invoiceNumber String   @unique
  method        String
  projectId     String   @db.ObjectId
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  clientId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PortfolioItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageUrl    String?
  projectUrl  String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Folder {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @db.ObjectId
  parentFolder   Folder?  @relation("SubFolders", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentFolderId String?  @db.ObjectId
  subFolders     Folder[] @relation("SubFolders")
  files          File[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model File {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  key            String
  name           String
  type           String
  url            String
  size           Int
  parentFolder   Folder   @relation(fields: [parentFolderId], references: [id])
  parentFolderId String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
